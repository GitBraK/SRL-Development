{$IFDEF SRL5}
  {$i SRL/SRL.simba}
{$ELSE}
  {$i SRL/SRL.scar}
{$ENDIF}
{*******************************************************************************
R_BOSS    Remote Based Objest Search System
by: Home, Hobbit, Kyle Undefined, Zyt3x and BraK also known as Dev Team 6
Description: System that automatically identifies and finds object in the
inventory, bank, and the chat window.
*******************************************************************************}
// To DO Check Sat, CommonCOlors

type
  TGEItem = record
    ID, Price : Integer;
    Name : string;
    BMP : Integer;
    BlackCount : Integer;
    AverageColor : Integer;
    CommonColors :TIntegerArray;
    BestColor : Integer;
    Tolerance : Integer;
    Hue : Extended;
    Sat : Extended;
    BestColorCount : Integer;
  end;


{*******************************************************************************
function CommonColorsBMP(Bmp : Integer) :TIntegerArray;
by: Dev Team 6
Description: Takes 3 best colors for given BMP.
*******************************************************************************}
function GetColorsBMP(BMP : Integer; BadColors : TIntegerArray): TIntegerArray;
var
  W, H, I, J, C : Integer;
  Target : Integer;
  ColArr, CountArr : TIntegerArray;
begin
  GetBitmapSize(BMP, W, H);

  ColArr := GetColorsBox(0, 0, W-1, H-1, True);
  ClearSameIntegers(ColArr);
  for I := High(ColArr) downto 0 do
    if InIntArray(BadColors, ColArr[I]) then
      DeleteValueInIntArray(ColArr, I);

  SetLength(CountArr, Length(ColArr));
  for I := High(CountArr) downto 0 do
    CountArr[I] := CountColor(ColArr[I], 0, 0, W-1, H-1);
  QuickSort(CountArr);
  InvertTIA(CountArr);

  SetLength(Result, Length(ColArr));
  for I := High(ColArr) downto 0 do
    for J := High(CountArr) downto 0 do
      if CountColor(ColArr[I], 0, 0, W-1, H-1) = CountArr[J] then
      begin
        Result[C] := ColArr[I];
        Inc(C);
        DeleteValueInIntArray(CountArr, J);
        Break;
      end;
  SetLength(Result, 3);
end;


procedure ModifyColors(Colors :TIntegerArray; var Color, Tol :Integer; var Hue, Sat :Extended);
var
  I,II : integer;
  HSLColor : Array[1..3] of Extended;
  HSL : Array[0..1] of Array[1..3] of Extended;

begin
  For I := 1 to 3 do
    HSL[0][i] := 255;
  For I := 0 to High(Colors) do
  begin;
    ColortoHSL(Colors[i],HSLColor[1],HSLColor[2],HSLColor[3]);
    For II := 1 to 3 do
    begin
      HSL[0][II] := MinE(HSLColor[II],HSL[0][II]);
      HSL[1][II] := MaxE(HSLColor[II],HSL[1][II]);
    end;
  Color := HSLToColor((HSL[1][1] + HSL[0][1]) div 2,(HSL[1][2] + HSL[0][2]) div 2,(HSL[1][3] + HSL[0][3]) div 2);
  Tol := Ceil((HSL[1][3])) - Ceil((HSL[1][3] + HSL[0][3]) div 2) + 2;
  try
  Hue := (HSL[1][1] - HSL[0][1]) / (HSL[1][3] - HSL[0][3]);
  except end;
  try
  Sat := (HSL[1][2] - HSL[0][2]) / (HSL[1][3] - HSL[0][3]);
  except end;
  end;
end;




{*******************************************************************************
function CashStringToInt(S : string) : Integer;
by: TomTuff
Description: Takes a string amount, and returns the Integer equivalent.
*******************************************************************************}
function CashStringToInt(S : string) : Integer;
var
  i, ii : Integer;
  Numbs : TStringArray;
  Temp : string;
begin
  Temp := '';
  Numbs := ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'k', 'm', 'b'];
  for i := 1 to High(S) do
    for ii := 0 to High(Numbs) do
      if(S[i] = Numbs[ii])then
        case ii of
          0..9: Temp := Temp + Numbs[ii];
          10..12:
          begin
            Result := StrToInt(Temp);
            case ii of
              10: Result := Result * 100; //Since price is given to 1 decimal,
              11: Result := Result * 100000; //instead of multiplying by the entire
              12: Result := Result * 100000000; //factor, you must multiply by factor/10
            end;
          end;
        end;
  if(Result = 0)then
    try
      Result := StrToInt(Temp);
    except end;
end;

{*******************************************************************************
function DownloadFile(FileLink, Path : string) : Boolean;
by: Dev Team 6
Description: Downloads a file to a specified path
*******************************************************************************}
function DownloadFile(FileLink, Path : string) : Boolean;
var
  PageString: string;
  iFile: Integer;
begin
  Result := False;
  try
    PageString := GetPage(FileLink);
    if(PageString = '')then Exit;
    iFile := RewriteFile(Path, False);
    Result := WriteFileString(iFile, PageString);
    CloseFile(iFile);
  except
  end;
end;

{*******************************************************************************
function GEItemExists(ID : Integer) : Boolean;
by: Dev Team 6
Description: Checks the local item DB to see if the item being requested exists
*******************************************************************************}
function GEItemExists(ID : Integer) : Boolean;
begin
  Result := FileExists(AppPath + 'Includes\db\' + ToStr(ID) + '.ini');
end;

{*******************************************************************************
function ReadGEItemINI(ID : Integer) : TGEItem;
by: Dev Team 6
Description: Reads the items .INI file and returns a TGEItem record
*******************************************************************************}
function ReadGEItemINI(ID : Integer) : TGEItem;
var
  I : Integer;
  Path : string;
begin
  if(not(GEItemExists(ID)))then Exit;

  Path := AppPath + 'Includes\db\' + ToStr(ID) + '.ini';
  try
    with Result do
    begin
      ID := StrToIntDef(ReadINI(ToStr(ID), 'ID', Path), -1);
      Price := StrToIntDef(ReadINI(ToStr(ID), 'Price', Path), -1);
      Name := ReadINI(ToStr(ID), 'Name', Path);
      BMP := BitmapFromString(32, 32, ReadINI(ToStr(ID), 'BMP', Path));
      BlackCount := StrToIntDef(ReadINI(ToStr(ID), 'BlackCount', Path), -1);
      AverageColor := StrToIntDef(ReadINI(ToStr(ID), 'AverageColor', Path), -1);
      For I := 0 to 2 do
        CommonColors[i] := StrToIntDef(ReadINI(ToStr(ID), 'CommonColors' + Inttostr(i), Path), -1);
      BestColor := StrToIntDef(ReadINI(ToStr(ID), 'AverageColor', Path), -1);
      Tolerance := StrToIntDef(ReadINI(ToStr(ID), 'AverageColor', Path), -1);
      Hue := StrToIntDef(ReadINI(ToStr(ID), 'AverageColor', Path), -1);
      Sat := StrToIntDef(ReadINI(ToStr(ID), 'AverageColor', Path), -1);
      BestColorCount := StrToIntDef(ReadINI(ToStr(ID), 'BestColorCount', Path), -1);
    end;
  except
  end;
end;

{*******************************************************************************
procedure WriteGEItemINI(Item : TGEItem);
by: Dev Team 6
Description: Writes a .INI file for the TGEItem that is passed in
*******************************************************************************}
procedure WriteGEItemINI(Item : TGEItem);
var
  I : Integer;
  Path : string;
begin
  if(not(DirectoryExists(AppPath + 'Includes\DB')))then
    CreateDirectory(AppPath + 'Includes\DB');
  Path := AppPath + 'Includes\DB\' + ToStr(Item.ID) + '.ini';
  try
    with Item do
    begin
      WriteINI(ToStr(ID), 'ID', ToStr(ID), Path);
      WriteINI(ToStr(ID), 'Price', ToStr(Price), Path);
      WriteINI(ToStr(ID), 'Name', Name, Path);
      WriteINI(ToStr(ID), 'BMP', CreateBitmapString(BMP), Path);
      WriteINI(ToStr(ID), 'BlackCount', ToStr(BlackCount), Path);
      WriteINI(ToStr(ID), 'AverageColor', ToStr(AverageColor), Path);
      For I := 0 to 2 do
        WriteINI(ToStr(ID), 'CommonColors' + inttostr(i), ToStr(CommonColors[i]), Path);
      WriteINI(ToStr(ID), 'BestColor', ToStr(BestColor), Path);
      WriteINI(ToStr(ID), 'Tolerance', ToStr(Tolerance), Path);
      WriteINI(ToStr(ID), 'Hue', ToStr(Hue), Path);
      WriteINI(ToStr(ID), 'Sat', ToStr(Sat), Path);
      WriteINI(ToStr(ID), 'BestColorCount', ToStr(BestColorCount), Path);
    end;
  except
  end;
end;


{*******************************************************************************
function GetGEItemBMPFromID(ID : Integer) : Integer;
by: Dev Team 6
Description: Retrieves the .gif image from the GE
*******************************************************************************}
function GetGEItemBMPFromID(ID : Integer) : Integer;
var
  I, J, W, H, BMP : Integer;
  TPA : TPointArray;
  Target : Integer;
  FilterColors, FilterColorsTo : TIntegerArray;
begin
  // URL to .gif of the item from runescape's GE
  if DownloadFile('http://services.runescape.com/m=itemdb_rs/g=runescape/obj_sprite.gif?id=' + ToStr(ID), AppPath + 'Includes\DB\' + ToStr(ID) + '.gif') then
  begin
    Target := GetImageTarget;
    BMP := LoadBitmap(AppPath + 'Includes\DB\' + ToStr(ID) + '.gif');
    SetTargetBitmap(BMP);
    GetBitmapSize(BMP, W, H);

    FilterColors := [2171169, 526344, 460551];
    FilterColorsTo := [0, srl_outline_black, srl_outline_black];
    for I := High(FilterColors) downto 0 do
      if(FindColors(TPA, FilterColors[I], 0, 0, W - 1, H - 1))then
        for J := 0 to High(TPA) do
          FastSetPixel(BMP, TPA[J].X, TPA[J].Y, FilterColorsTo[I]);

    Result := BitmapFromClient(0, 0, W-1, H-1);

    FreeTarget(GetImageTarget);
    FreeBitmap(BMP);
    SetImageTarget(Target);
  end;
end;

{*******************************************************************************
function CreateGEItemFromIDEx(ID : Integer; Force : Boolean) : TGEItem;
by: Dev Team 6
Description: Creates an TGEItem for the ID that is passed in. If Force is set
             to True, the current .gif image and .INI files will be rewriten
*******************************************************************************}
function CreateGEItemFromIDEx(ID : Integer; Force : Boolean) : TGEItem;
var
  S : string;
  TmpCTS, Target, W, H, I : Integer;
  BoxTPA, TPA : TPointArray;
  FilterColors : TIntegerArray;
begin
  if(GEItemExists(ID) and (not(Force)))then
  begin
    Result := ReadGEItemINI(ID);
    Exit;
  end;

  // URL to the item from runescape's GE
  S := GetPage('http://services.runescape.com/m=itemdb_rs/g=runescape/viewitem.ws?obj=' + ToStr(ID));
  Result.ID := ID;
  with Result do
  begin
    Name := Replace(Between('<h5>', '</h5>', S), #10, '');
    Price := CashStringToInt(Between('<td>', '<', Between('Current guide price', '/td>', S)));
    BMP := GetGEItemBMPFromID(ID);

    Target := GetImageTarget;
    SetTargetBitmap(BMP);
    GetBitmapSize(BMP, W, H);
    FilterColors := [0, 2171169];
    BoxTPA := TPAFromBox(IntToBox(0, 0, W-1, H-1));
    for I := High(FilterColors) downto 0 do
      if(FindColors(TPA, FilterColors[I], 0, 0, W-1, H-1))then
        BoxTPA := ClearTPAFromTPA(BoxTPA, TPA);
    FindColors(TPA, srl_outline_black, 0, 0, W-1, H-1);

    BlackCount := Length(TPA);
    AverageColor := AverageTIA(GetColors(BoxTPA));
    CommonColors := GetColorsBMP(BMP, [2171169, 526344, 460551, 0]);
    ModifyColors(CommonColors, BestColor, Tolerance, Hue, Sat);

    TmpCTS := GetColorToleranceSpeed
    SetColorToleranceSpeed(2);
    SetColorspeed2Modifiers(Hue, Sat);
    FindColorsTolerance(TPA, BestColor, 0, 0, W - 1, H - 1, Tolerance);
    BestColorCount := Length(TPA);

    FreeTarget(GetImageTarget);
    SetImageTarget(Target);
  end;
  WriteGEItemINI(Result);
end;

{*******************************************************************************
function CreateGEItemFromID(ID : Integer) : TGEItem;
by: Dev Team 6
Description: Creates an TGEItem for the ID passed in, and disables Force
*******************************************************************************}
function CreateGEItemFromID(ID : Integer) : TGEItem;
begin
  Result := CreateGEItemFromIDEx(ID, False);
end;

{*******************************************************************************
function LoadGEItemFromID(ID : Integer) : TGEItem;
by: Dev Team 6
Description: Loads an TGEItem record from the local DB of items
*******************************************************************************}
function LoadGEItemFromID(ID : Integer) : TGEItem;
begin
  if(GEItemExists(ID))then
    Result := ReadGEItemINI(ID)
end;

{*******************************************************************************
function FindGEItem(var X, Y : Integer; ID : Integer) : Boolean;
by: Dev Team 6
Description: Searches the Inventory for the item and set the X, Y variables to
             the coordinates if found
*******************************************************************************}
function FindGEItem(var X, Y : Integer; ID : Integer) : Boolean;
var
  Acc : Extended;
  Item : TGEItem;
  P : TPoint;
begin
  Result := False;
  Item := LoadGEItemFromID(ID);

  // BlackCount, AverageColor, etc...


  ClearDebugImg;
  DrawBitmapDebugImg(Item.BMP);
  // Use this as last resort IMO
  if(FindDeformedBitmapToleranceIn(Item.BMP, P.X, P.Y, MIX1, MIY1, MIX2, MIY2, 25, 0, True, Acc))then
    if(Acc > 0.80)then
    begin
      Result := True;
      FreeBitmap(Item.BMP);
      P := ItemCoords(CoordsToItem(P.X, P.Y));
      X := P.X; Y := P.Y;
      Exit;
    end;{ else
      WriteLn(Acc); }
end;


function SortTIAFrom(TIA :TIntegerArray; From :Integer) :TIntegerArray;
var
  TPA :TPointArray;
  Hi, I :Integer;
begin
  Hi := Length(TIA);
  for I := 0 to Hi - 1 do
  begin
    SetLength(TPA, I + 1);
    TPA[I].X := 0;
    TPA[I].Y := TIA[I];
  end;
  SortTPAFrom(TPA, Point(0, From));
  for I := 0 to Hi - 1 do
    TIA[I] := TPA[I].Y;
  Result := TIA;
end;


function TestItem(ID : Integer) : Boolean;
var
  Item : TGEItem;
  ItemBox : TBox;
  MiddlePoint : TPoint;
  CloseCountArr, CountArr :TIntegerArray;
  ClosestCount, T, I, a, CTS, TotalCount :Integer;
  TPA :TPointArray;
  aTPA :T2DPointArray;
begin
  Result := False;
  Item := CreateGEItemFromIDEx(114, True);
  //Item := LoadGEItemFromID(ID);
  writeln(Item);

  SetColorToleranceSpeed(2);
  SetColorspeed2Modifiers(Item.Hue, Item.Sat);
  MarkTime(T);
  FindColorsTolerance(TPA, Item.BestColor, MIX1, MIY1, MIX2, MIY2, Item.Tolerance)
  aTPA := TPAtoATPAEx(TPA, 7, 7);
  Writeln(Length(aTPA));
  for I := 0 to High(aTPA) do
  begin
    MiddlePoint := MiddleTPA(aTPA[I]);
    ItemBox := InvBox(CoordsToItem(MiddlePoint.X, MiddlePoint.Y));
    FindColorsTolerance(TPA, Item.BestColor, ItemBox.X1, ItemBox.Y1, ItemBox.X2, ItemBox.Y2, Item.Tolerance)
    Writeln(Length(TPA));
    SetLength(CountArr, I + 1);
    CountArr[I] := Length(TPA);
  end;

  CloseCountArr := SortTIAFrom(CountArr, Item.BestColorCount);
  for I := 0 to High(aTPA) do
  begin
    MiddlePoint := MiddleTPA(aTPA[I]);
    ItemBox := InvBox(CoordsToItem(MiddlePoint.X, MiddlePoint.Y));
    FindColorsTolerance(TPA, Item.BestColor, ItemBox.X1, ItemBox.Y1, ItemBox.X2, ItemBox.Y2, Item.Tolerance)
    If Length(TPA) = CloseCountArr[0] then
      MMouse(MiddlePoint.X, MiddlePoint.Y, 0, 0);
  end;
end;




{//////////////////////////////////////////////////////////////////////////////}
// TESTING //
{//////////////////////////////////////////////////////////////////////////////}
var
  //Item : TGEItem;
  x, y : Integer;

begin
  SetupSRL;
  MouseSpeed := 15;

  ClearDebugImg;
  TestItem(1381);


  {if(FindGEItem(X, Y, Item.ID))then
    MMouse(X-5, Y-5, 10, 10)
  else
    WriteLn('Did not find item');}
  //FreeBitmap(Item.BMP);
end.
